name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:

  build-linux:
    name: build / linux / ffmpeg ${{ matrix.ffmpeg_version }}
    runs-on: ubuntu-latest
    container: jrottenberg/ffmpeg:${{ matrix.ffmpeg_version }}-ubuntu

    strategy:
      matrix:
        ffmpeg_version: ["6.0", "6.1", "7.0", "7.1"]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ca-certificates clang curl pkg-config

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
    
      - name: Build
        run: cargo build

  build-macos:
    name: build / macos / latest ffmpeg
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install ffmpeg pkg-config

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
    
      - name: Build
        run: cargo build

  build-windows:
    name: build / windows / latest ffmpeg
    runs-on: windows-latest

    env:
      FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 添加 vcpkg 缓存
      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg
          key: vcpkg-${{ runner.os }}

      # 安装 vcpkg 和 FFmpeg
      - name: Install vcpkg and FFmpeg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg --depth 1
          ./vcpkg/bootstrap-vcpkg.bat
          ./vcpkg/vcpkg.exe install ffmpeg:x64-windows-static-md

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ github.workspace }}/clang

      - name: Setup Environment
        shell: pwsh
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          echo "LIBCLANG_PATH=${{ github.workspace }}/clang/lib" >> $env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ github.workspace }}/clang/bin/llvm-config" >> $env:GITHUB_ENV

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x64-windows-msvc

      - name: Build
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
          LIBCLANG_PATH: ${{ github.workspace }}/clang/lib
          LLVM_CONFIG_PATH: ${{ github.workspace }}/clang/bin/llvm-config
        run: |
          cargo build --no-default-features --features ffmpeg7,link_vcpkg_ffmpeg

  test:
    runs-on: ubuntu-latest
    container: jrottenberg/ffmpeg:7.1-ubuntu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ca-certificates clang curl pkg-config

#     - name: Setup Rust
#       uses: dtolnay/rust-toolchain@stable
    
      # TODO: Temporarily use nightly version of Rust for tests. Stable
      # currently has a bug that causes linking to fail. The fix is in
      # https://github.com/rust-lang/rust/commit/9ed0d11efbec18a1fa4155576a3bcb685676d23c
      # and will hit stable at some point.

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
 
      - name: Test
        run: cargo +nightly test --all-features

  lints:
    runs-on: ubuntu-latest
    container: jrottenberg/ffmpeg:7.1-ubuntu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ca-certificates clang curl pkg-config

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
    
      - name: Rustfmt
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --all --all-features -- -D warnings
